
#include <iostream>
#include <cmath>
#include <cstring>
#include <fstream>
using namespace std;
class StdDeviation
{
private:
    int max;
    double value[100];
    double mean;
public:
    double calmean()
    {
        double sum = 0;
        for(int i = 0; i < max; i++)
            sum += value[i];
        return (sum / max);
    }
    double calvar()
    {
        mean = calmean();
        double temp = 0;
        for(int i = 0; i < max; i++)
        {
             temp += (value[i] - mean) * (value[i] - mean) ;
        }
        return temp / max;
    }
  /*  double CalculateSampleVariane()
    {
        mean = CalculateMean();
        double temp = 0;
        for(int i = 0; i < max; i++)
        {
             temp += (value[i] - mean) * (value[i] - mean) ;
        }
        return temp / (max - 1);
    }*/
    int SetValues(double *p, int count)
    {
        if(count > 100)
            return -1;
        max = count;
        for(int i = 0; i < count; i++)
            value[i] = p[i];
        return 0;
    }
    double calstddev()
    {
        return sqrt(calvar());
    }
  /*  double Calculate_SampleStandardDeviation()
    {
        return sqrt(CalculateSampleVariane());
    }*/
};
class FinanceCalculator
{
private:
    double XSeries[100];
    double YSeries[100];
    StdDeviation x;
    StdDeviation y;
public:
double sx,sy;
    int max;
    void SetValues(double *xvalues, double *yvalues, int count)
    {
        for(int i = 0; i < count; i++)
        {
            XSeries[i] = xvalues[i];
            YSeries[i] = yvalues[i];
        }
        x.SetValues(xvalues, count);
        y.SetValues(yvalues, count);
        max = count;
    }
    double calcovar()
    {
        double xmean = x.calmean();
        double ymean = y.calmean();
        double total = 0;
        for(int i = 0; i < max; i++)
        {
            total += (XSeries[i] - xmean) * (YSeries[i] - ymean);
        }
        return total / max;
    }
    double calcor()
    {
        double cov = calcovar();
	 sx=x.calstddev();
	 sy=y.calstddev();
        double corr = cov / ( sx * sy);
        return corr;
    }
};
int main()
{
int i=0;
double dValue,dValue1;
double yarr[100],xarr[100];
ifstream infile;
ifstream infile1; 
    FinanceCalculator calc;
    {

   infile.open("valxx.txt");
   infile1.open("valyy.txt");

infile >> dValue;
infile1 >> dValue1; 
while(i<100)
{ 
xarr[i]=dValue;
yarr[i]=dValue1;
infile >> dValue;
infile1 >> dValue1; 
i++;
}


        calc.SetValues(xarr,yarr,sizeof(xarr) / sizeof(xarr[0]));
double cor=calc.calcor();
double cov=calc.calcovar();
        printf("Covariance = %.10lf\n", cov);
        printf("Correlation = %.10lf\n", cor);
double m=cor*(calc.sx/calc.sy);
printf("slope=%f\n",m);
if(cor>0.5)
{
if(m>0.5)
printf("greedy node is not exist in this network");
else 
printf("run watchdog tool");
}
else 
{
printf("run watchdog tool");
}

    }
}
